
#nullable enable

// DO NOT EDIT THIS FILE!
// it is auto generated via Events.tt

namespace BytingLib
{
            
    public class EventAction
    {
        private event Action? _event;

        public IDisposable Subscribe(Action action)
        {
            _event += action;

            return new EventUnsubscriber(this, action);
        }

        public void Invoke()
        {
                    _event?.Invoke();
                            }

        /// <summary>
        /// Should only be called by EventUnsubscriber. Dispose the IDisposable from Subscribe() instead.
        /// </summary>
        private void Unsubscribe(Action action)
        {
            _event -= action;
        }

        private class EventUnsubscriber : IDisposable
        {
            private readonly EventAction _event;
            private readonly Action action;

            public EventUnsubscriber(EventAction _event, Action action)
            {
                this._event = _event;
                this.action = action;
            }

            public void Dispose()
            {
                _event.Unsubscribe(action);
            }
        }
    }
                            
    public class EventAction<T1>
    {
        private event Action<T1>? _event;

        public IDisposable Subscribe(Action<T1> action)
        {
            _event += action;

            return new EventUnsubscriber(this, action);
        }

        public void Invoke(T1 t1)
        {
                    _event?.Invoke(t1);
                            }

        /// <summary>
        /// Should only be called by EventUnsubscriber. Dispose the IDisposable from Subscribe() instead.
        /// </summary>
        private void Unsubscribe(Action<T1> action)
        {
            _event -= action;
        }

        private class EventUnsubscriber : IDisposable
        {
            private readonly EventAction<T1> _event;
            private readonly Action<T1> action;

            public EventUnsubscriber(EventAction<T1> _event, Action<T1> action)
            {
                this._event = _event;
                this.action = action;
            }

            public void Dispose()
            {
                _event.Unsubscribe(action);
            }
        }
    }
                            
    public class EventAction<T1, T2>
    {
        private event Action<T1, T2>? _event;

        public IDisposable Subscribe(Action<T1, T2> action)
        {
            _event += action;

            return new EventUnsubscriber(this, action);
        }

        public void Invoke(T1 t1, T2 t2)
        {
                    _event?.Invoke(t1, t2);
                            }

        /// <summary>
        /// Should only be called by EventUnsubscriber. Dispose the IDisposable from Subscribe() instead.
        /// </summary>
        private void Unsubscribe(Action<T1, T2> action)
        {
            _event -= action;
        }

        private class EventUnsubscriber : IDisposable
        {
            private readonly EventAction<T1, T2> _event;
            private readonly Action<T1, T2> action;

            public EventUnsubscriber(EventAction<T1, T2> _event, Action<T1, T2> action)
            {
                this._event = _event;
                this.action = action;
            }

            public void Dispose()
            {
                _event.Unsubscribe(action);
            }
        }
    }
                            
    public class EventAction<T1, T2, T3>
    {
        private event Action<T1, T2, T3>? _event;

        public IDisposable Subscribe(Action<T1, T2, T3> action)
        {
            _event += action;

            return new EventUnsubscriber(this, action);
        }

        public void Invoke(T1 t1, T2 t2, T3 t3)
        {
                    _event?.Invoke(t1, t2, t3);
                            }

        /// <summary>
        /// Should only be called by EventUnsubscriber. Dispose the IDisposable from Subscribe() instead.
        /// </summary>
        private void Unsubscribe(Action<T1, T2, T3> action)
        {
            _event -= action;
        }

        private class EventUnsubscriber : IDisposable
        {
            private readonly EventAction<T1, T2, T3> _event;
            private readonly Action<T1, T2, T3> action;

            public EventUnsubscriber(EventAction<T1, T2, T3> _event, Action<T1, T2, T3> action)
            {
                this._event = _event;
                this.action = action;
            }

            public void Dispose()
            {
                _event.Unsubscribe(action);
            }
        }
    }
                            
    public class EventAction<T1, T2, T3, T4>
    {
        private event Action<T1, T2, T3, T4>? _event;

        public IDisposable Subscribe(Action<T1, T2, T3, T4> action)
        {
            _event += action;

            return new EventUnsubscriber(this, action);
        }

        public void Invoke(T1 t1, T2 t2, T3 t3, T4 t4)
        {
                    _event?.Invoke(t1, t2, t3, t4);
                            }

        /// <summary>
        /// Should only be called by EventUnsubscriber. Dispose the IDisposable from Subscribe() instead.
        /// </summary>
        private void Unsubscribe(Action<T1, T2, T3, T4> action)
        {
            _event -= action;
        }

        private class EventUnsubscriber : IDisposable
        {
            private readonly EventAction<T1, T2, T3, T4> _event;
            private readonly Action<T1, T2, T3, T4> action;

            public EventUnsubscriber(EventAction<T1, T2, T3, T4> _event, Action<T1, T2, T3, T4> action)
            {
                this._event = _event;
                this.action = action;
            }

            public void Dispose()
            {
                _event.Unsubscribe(action);
            }
        }
    }
                            
    public class EventAction<T1, T2, T3, T4, T5>
    {
        private event Action<T1, T2, T3, T4, T5>? _event;

        public IDisposable Subscribe(Action<T1, T2, T3, T4, T5> action)
        {
            _event += action;

            return new EventUnsubscriber(this, action);
        }

        public void Invoke(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)
        {
                    _event?.Invoke(t1, t2, t3, t4, t5);
                            }

        /// <summary>
        /// Should only be called by EventUnsubscriber. Dispose the IDisposable from Subscribe() instead.
        /// </summary>
        private void Unsubscribe(Action<T1, T2, T3, T4, T5> action)
        {
            _event -= action;
        }

        private class EventUnsubscriber : IDisposable
        {
            private readonly EventAction<T1, T2, T3, T4, T5> _event;
            private readonly Action<T1, T2, T3, T4, T5> action;

            public EventUnsubscriber(EventAction<T1, T2, T3, T4, T5> _event, Action<T1, T2, T3, T4, T5> action)
            {
                this._event = _event;
                this.action = action;
            }

            public void Dispose()
            {
                _event.Unsubscribe(action);
            }
        }
    }
                            
    public class EventFunc<T1>
    {
        private event Func<T1>? _event;

        public IDisposable Subscribe(Func<T1> action)
        {
            _event += action;

            return new EventUnsubscriber(this, action);
        }

        public T1? Invoke()
        {
                    if (_event == null)
                return default(T1);
            return _event.Invoke();
                            }

        /// <summary>
        /// Should only be called by EventUnsubscriber. Dispose the IDisposable from Subscribe() instead.
        /// </summary>
        private void Unsubscribe(Func<T1> action)
        {
            _event -= action;
        }

        private class EventUnsubscriber : IDisposable
        {
            private readonly EventFunc<T1> _event;
            private readonly Func<T1> func;

            public EventUnsubscriber(EventFunc<T1> _event, Func<T1> func)
            {
                this._event = _event;
                this.func = func;
            }

            public void Dispose()
            {
                _event.Unsubscribe(func);
            }
        }
    }
                            
    public class EventFunc<T1, T2>
    {
        private event Func<T1, T2>? _event;

        public IDisposable Subscribe(Func<T1, T2> action)
        {
            _event += action;

            return new EventUnsubscriber(this, action);
        }

        public T2? Invoke(T1 t1)
        {
                    if (_event == null)
                return default(T2);
            return _event.Invoke(t1);
                            }

        /// <summary>
        /// Should only be called by EventUnsubscriber. Dispose the IDisposable from Subscribe() instead.
        /// </summary>
        private void Unsubscribe(Func<T1, T2> action)
        {
            _event -= action;
        }

        private class EventUnsubscriber : IDisposable
        {
            private readonly EventFunc<T1, T2> _event;
            private readonly Func<T1, T2> func;

            public EventUnsubscriber(EventFunc<T1, T2> _event, Func<T1, T2> func)
            {
                this._event = _event;
                this.func = func;
            }

            public void Dispose()
            {
                _event.Unsubscribe(func);
            }
        }
    }
                            
    public class EventFunc<T1, T2, T3>
    {
        private event Func<T1, T2, T3>? _event;

        public IDisposable Subscribe(Func<T1, T2, T3> action)
        {
            _event += action;

            return new EventUnsubscriber(this, action);
        }

        public T3? Invoke(T1 t1, T2 t2)
        {
                    if (_event == null)
                return default(T3);
            return _event.Invoke(t1, t2);
                            }

        /// <summary>
        /// Should only be called by EventUnsubscriber. Dispose the IDisposable from Subscribe() instead.
        /// </summary>
        private void Unsubscribe(Func<T1, T2, T3> action)
        {
            _event -= action;
        }

        private class EventUnsubscriber : IDisposable
        {
            private readonly EventFunc<T1, T2, T3> _event;
            private readonly Func<T1, T2, T3> func;

            public EventUnsubscriber(EventFunc<T1, T2, T3> _event, Func<T1, T2, T3> func)
            {
                this._event = _event;
                this.func = func;
            }

            public void Dispose()
            {
                _event.Unsubscribe(func);
            }
        }
    }
                            
    public class EventFunc<T1, T2, T3, T4>
    {
        private event Func<T1, T2, T3, T4>? _event;

        public IDisposable Subscribe(Func<T1, T2, T3, T4> action)
        {
            _event += action;

            return new EventUnsubscriber(this, action);
        }

        public T4? Invoke(T1 t1, T2 t2, T3 t3)
        {
                    if (_event == null)
                return default(T4);
            return _event.Invoke(t1, t2, t3);
                            }

        /// <summary>
        /// Should only be called by EventUnsubscriber. Dispose the IDisposable from Subscribe() instead.
        /// </summary>
        private void Unsubscribe(Func<T1, T2, T3, T4> action)
        {
            _event -= action;
        }

        private class EventUnsubscriber : IDisposable
        {
            private readonly EventFunc<T1, T2, T3, T4> _event;
            private readonly Func<T1, T2, T3, T4> func;

            public EventUnsubscriber(EventFunc<T1, T2, T3, T4> _event, Func<T1, T2, T3, T4> func)
            {
                this._event = _event;
                this.func = func;
            }

            public void Dispose()
            {
                _event.Unsubscribe(func);
            }
        }
    }
                            
    public class EventFunc<T1, T2, T3, T4, T5>
    {
        private event Func<T1, T2, T3, T4, T5>? _event;

        public IDisposable Subscribe(Func<T1, T2, T3, T4, T5> action)
        {
            _event += action;

            return new EventUnsubscriber(this, action);
        }

        public T5? Invoke(T1 t1, T2 t2, T3 t3, T4 t4)
        {
                    if (_event == null)
                return default(T5);
            return _event.Invoke(t1, t2, t3, t4);
                            }

        /// <summary>
        /// Should only be called by EventUnsubscriber. Dispose the IDisposable from Subscribe() instead.
        /// </summary>
        private void Unsubscribe(Func<T1, T2, T3, T4, T5> action)
        {
            _event -= action;
        }

        private class EventUnsubscriber : IDisposable
        {
            private readonly EventFunc<T1, T2, T3, T4, T5> _event;
            private readonly Func<T1, T2, T3, T4, T5> func;

            public EventUnsubscriber(EventFunc<T1, T2, T3, T4, T5> _event, Func<T1, T2, T3, T4, T5> func)
            {
                this._event = _event;
                this.func = func;
            }

            public void Dispose()
            {
                _event.Unsubscribe(func);
            }
        }
    }
                
}

#nullable restore